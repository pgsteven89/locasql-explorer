#!/usr/bin/env python3
"""
Test script to demonstrate the new search functionality added to both 
paginated and standard results views.
"""

import sys
import os

# Add src to Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

import pandas as pd
from PyQt6.QtWidgets import QApplication

def test_results_view_search():
    """Test the search functionality in ResultsTableView."""
    print("Testing ResultsTableView search functionality...")
    
    # Create sample data
    sample_data = pd.DataFrame({
        'Name': ['Alice Johnson', 'Bob Smith', 'Charlie Brown', 'Diana Prince', 'Eve Wilson'],
        'Age': [25, 30, 35, 28, 32],
        'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix'],
        'Department': ['Engineering', 'Marketing', 'Sales', 'Engineering', 'HR']
    })
    
    # Import and test ResultsTableView
    try:
        from localsql_explorer.ui.results_view import ResultsTableView
        
        app = QApplication(sys.argv) if not QApplication.instance() else QApplication.instance()
        
        # Create the widget
        results_view = ResultsTableView()
        
        # Test setting dataframe
        results_view.set_dataframe(sample_data)
        print(f"‚úì Set DataFrame with {len(sample_data)} rows, {len(sample_data.columns)} columns")
        
        # Test column dropdown population
        column_count = results_view.column_combo.count()
        print(f"‚úì Column dropdown populated with {column_count} items")
        
        # Test search functionality
        results_view.search_input.setText("Johnson")
        results_view.filter_results()
        filtered_data = results_view.get_dataframe()
        print(f"‚úì Search for 'Johnson': {len(filtered_data)} results")
        
        # Test column-specific search
        results_view.column_combo.setCurrentText("Department")
        results_view.search_input.setText("Engineering")
        results_view.filter_results()
        filtered_data = results_view.get_dataframe()
        print(f"‚úì Search for 'Engineering' in Department column: {len(filtered_data)} results")
        
        # Test case sensitivity
        results_view.case_sensitive_checkbox.setChecked(True)
        results_view.search_input.setText("engineering")  # lowercase
        results_view.filter_results()
        filtered_data = results_view.get_dataframe()
        print(f"‚úì Case sensitive search for 'engineering': {len(filtered_data)} results")
        
        print("‚úì ResultsTableView search functionality working correctly!")
        
    except Exception as e:
        print(f"‚úó Error testing ResultsTableView: {e}")
        return False
    
    return True

def test_paginated_view_enhancements():
    """Test the enhancements to PaginatedTableWidget."""
    print("\nTesting PaginatedTableWidget enhancements...")
    
    try:
        from localsql_explorer.ui.paginated_results import PaginatedTableWidget
        
        app = QApplication(sys.argv) if not QApplication.instance() else QApplication.instance()
        
        # Create the widget
        paginated_view = PaginatedTableWidget()
        
        # Check if new methods exist
        assert hasattr(paginated_view, 'update_status_with_filter_info'), "Missing update_status_with_filter_info method"
        print("‚úì update_status_with_filter_info method exists")
        
        # Check if status_updated signal exists
        assert hasattr(paginated_view, 'status_updated'), "Missing status_updated signal"
        print("‚úì status_updated signal exists")
        
        print("‚úì PaginatedTableWidget enhancements working correctly!")
        
    except Exception as e:
        print(f"‚úó Error testing PaginatedTableWidget: {e}")
        return False
    
    return True

if __name__ == "__main__":
    print("LocalSQL Explorer - Search Functionality Test")
    print("=" * 50)
    
    # Test both components
    results_ok = test_results_view_search()
    paginated_ok = test_paginated_view_enhancements()
    
    print("\n" + "=" * 50)
    if results_ok and paginated_ok:
        print("üéâ All tests passed! Search functionality is working correctly.")
    else:
        print("‚ùå Some tests failed. Please check the implementation.")
    
    print("\nKey Features Added:")
    print("1. ‚úì Column-specific search dropdown in both views")
    print("2. ‚úì Real-time filtering as you type")
    print("3. ‚úì Case sensitivity toggle")
    print("4. ‚úì Filter status display showing match count")
    print("5. ‚úì Status bar integration for paginated view")
    print("6. ‚úì Multiple export options (page/all/filtered)")